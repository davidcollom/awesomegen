package render

import (
	"testing"

	"github.com/davidcollom/awesomegen/internal/config"
	"github.com/davidcollom/awesomegen/internal/github"
	"github.com/stretchr/testify/require"
)

func TestHumanStarsLocaleGB(t *testing.T) {
	got := humanStars(4500, "locale", "en-GB")
	require.Equal(t, "4,500", got)
}

func TestHumanStarsCompact(t *testing.T) {
	require.Equal(t, "4.5k", humanStars(4500, "compact", "en-GB"))
	require.Equal(t, "12k", humanStars(12_345, "compact", "en-GB"))
	require.Equal(t, "1.2M", humanStars(1_234_567, "compact", "en-GB"))
}

func TestGroupingFlat(t *testing.T) {
	// build a tiny list with two items/topics and assert section headers exist
}

func TestGroupingNested(t *testing.T) {
	// build with two-topic repos and assert both ##primary and ###secondary appear
}
func TestMarkdownVariants(t *testing.T) {
	tests := []struct {
		name     string
		list     config.List
		contains []string
	}{
		{
			name: "FlatUnGrouped",
			list: config.List{
				Title:        "Awesome List",
				Tagline:      "A curated list of awesome repositories.",
				Badges:       []string{"https://img.shields.io/badge/awesome-blue.svg"},
				GroupByTopic: false,
				Categories: []config.Category{
					{
						Items: []config.Item{
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/one",
									URL:         "https://github.com/repo/one",
									Stars:       1234,
									License:     "MIT",
									Description: "First repo",
								},
								Notes: "Note 1",
							},
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/two",
									URL:         "https://github.com/repo/two",
									Stars:       5678,
									License:     "Apache-2.0",
									Description: "Second repo",
								},
							},
						},
					},
				},
				StarsFormat: "compact",
				Locale:      "en-GB",
			},
			contains: []string{
				"# Awesome List",
				"![badge](https://img.shields.io/badge/awesome-blue.svg)",
				"> A curated list of awesome repositories.",
				"## Repositories",
				"- [repo/one](https://github.com/repo/one) — ⭐ 1.2k · MIT — First repo — Note 1",
				"- [repo/two](https://github.com/repo/two) — ⭐ 5.7k · Apache-2.0 — Second repo",
				"*Generated by `awesomegen`.*",
			},
		},
		{
			name: "FlatByTopic",
			list: config.List{
				Title:             "Awesome Topics",
				GroupByTopic:      true,
				TopicGroupingMode: "flat",
				TopicFallback:     "Misc",
				Categories: []config.Category{
					{
						Items: []config.Item{
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/alpha",
									URL:         "https://github.com/repo/alpha",
									Stars:       100,
									License:     "MIT",
									Description: "Alpha repo",
									Topics:      []string{"AI"},
								},
							},
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/beta",
									URL:         "https://github.com/repo/beta",
									Stars:       200,
									License:     "GPL",
									Description: "Beta repo",
									Topics:      []string{"Web"},
								},
							},
						},
					},
				},
				StarsFormat: "compact",
				Locale:      "en-GB",
			},
			contains: []string{
				"## Table of Contents",
				"- [AI](#ai)",
				"- [Web](#web)",
				"## AI",
				"- [repo/alpha](https://github.com/repo/alpha) — ⭐ 100 · MIT — Alpha repo",
				"## Web",
				"- [repo/beta](https://github.com/repo/beta) — ⭐ 200 · GPL — Beta repo",
			},
		},
		{
			name: "NestedByTopic",
			list: config.List{
				Title:             "Awesome Nested",
				GroupByTopic:      true,
				TopicGroupingMode: "nested",
				TopicFallback:     "Misc",
				Categories: []config.Category{
					{
						Items: []config.Item{
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/one",
									URL:         "https://github.com/repo/one",
									Stars:       500,
									License:     "MIT",
									Description: "Repo One",
									Topics:      []string{"Data", "Analysis"},
								},
							},
							{
								GHMeta: &github.RepoMeta{
									FullName:    "repo/two",
									URL:         "https://github.com/repo/two",
									Stars:       800,
									License:     "Apache",
									Description: "Repo Two",
									Topics:      []string{"Data", "Visualization"},
								},
							},
						},
					},
				},
				StarsFormat: "compact",
				Locale:      "en-GB",
			},
			contains: []string{
				"## Table of Contents",
				"- [Data](#data)",
				"## Data",
				"### Analysis",
				"- [repo/one](https://github.com/repo/one) — ⭐ 500 · MIT — Repo One",
				"### Visualization",
				"- [repo/two](https://github.com/repo/two) — ⭐ 800 · Apache — Repo Two",
			},
		},
		{
			name: "EmptyCategories",
			list: config.List{
				Title:        "Empty List",
				GroupByTopic: false,
				Categories:   []config.Category{},
			},
			contains: []string{
				"# Empty List",
				"## Repositories",
				"*Generated by `awesomegen`.*",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			md := Markdown(tt.list)
			for _, want := range tt.contains {
				require.Contains(t, md, want)
			}
		})
	}
}
