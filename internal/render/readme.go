package render

import (
	"fmt"
	"slices"
	"strings"

	"github.com/davidcollom/awesomegen/internal/config"
)

func Markdown(list config.List) string {
	var b strings.Builder
	fmt.Fprintf(&b, "# %s\n\n", list.Title)
	if len(list.Badges) > 0 {
		for _, u := range list.Badges {
			fmt.Fprintf(&b, "![badge](%s) ", u)
		}
		b.WriteString("\n\n")
	}
	if list.Tagline != "" {
		fmt.Fprintf(&b, "> %s\n\n", list.Tagline)
	}
	// TOC
	b.WriteString("## Table of Contents\n")
	for _, c := range list.Categories {
		if len(c.Items) == 0 {
			continue
		}
		fmt.Fprintf(&b, "- [%s](#%s)\n", c.Name, slug(c.Name))
	}
	b.WriteString("\n")

	// Sections
	for _, c := range list.Categories {
		if len(c.Items) == 0 {
			continue
		}
		fmt.Fprintf(&b, "## %s\n\n", c.Name)
		for _, it := range c.Items {
			switch it.Type {
			case config.ItemGitHub:
				m := it.GHMeta
				if m == nil {
					continue
				}
				license := ""
				if m.License != "" {
					license = " · " + m.License
				}
				topics := ""
				if len(m.Topics) > 0 {
					ts := m.Topics
					if len(ts) > 5 {
						ts = ts[:5]
					}
					topics = " · `" + strings.Join(ts, "`, `") + "`"
				}
				note := ""
				if it.Notes != "" {
					note = " — " + it.Notes
				}
				desc := strings.TrimSpace(m.Description)
				fmt.Fprintf(&b, "- [%s](%s) — ⭐ %d%s%s — %s%s\n",
					m.FullName, m.URL, m.Stars, license, topics, desc, note)
			case config.ItemLink:
				title := it.Title
				if title == "" {
					title = it.URL
				}
				note := ""
				if it.Notes != "" {
					note = " — " + it.Notes
				}
				fmt.Fprintf(&b, "- [%s](%s)%s\n", title, it.URL, note)
			}
		}
		b.WriteString("\n")
	}
	b.WriteString("\n---\n\n*Generated by `awesomegen`.*\n")
	return b.String()
}

func slug(s string) string {
	return strings.ToLower(strings.ReplaceAll(strings.TrimSpace(s), " ", "-"))
}

func sortItems(items []config.Item) {
	slices.SortFunc(items, func(a, b config.Item) int {
		typeRank := func(t config.ItemType) int {
			if t == config.ItemGitHub {
				return 0
			}
			return 1
		}
		if r := typeRank(a.Type) - typeRank(b.Type); r != 0 {
			return r
		}
		ak := key(a)
		bk := key(b)
		switch {
		case ak < bk:
			return -1
		case ak > bk:
			return 1
		default:
			return 0
		}
	})
}

func key(i config.Item) string {
	if i.Type == config.ItemGitHub && i.GHMeta != nil {
		return i.GHMeta.FullName
	}
	if i.Title != "" {
		return i.Title
	}
	return i.URL
}
